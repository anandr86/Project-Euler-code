(define palin? (lambda (x)
		 (letrec ((palin-1? (lambda (x y)
				      (if (eq? (car x) (car y))
					  (if (null? (cdr x))
					      #t
					      (palin-1? (cdr x) (cdr y)))
					  #f)
				      )
				    )
			  (strx (string->list (number->string x)))
			  (rstrx (reverse strx)))
		   (palin-1? strx rstrx))))

(define gen-palin (lambda (ul ll)
		    (letrec ((gen-palin-1 (lambda (x)
					    (letrec ((gen-palin-2 (lambda (y)
								    (if (<= y ll)
									'()
									(if (palin? (* x y))
									    `(,x ,y)
									    (gen-palin-2 (- y 1)))))))
					      (if (<= x ll)
						  '()
						  (let ((r (gen-palin-2 x)))
						    (if (null? r)
							(gen-palin-1 (- x 1))
							r)))))))
		      (gen-palin-1 ul))))